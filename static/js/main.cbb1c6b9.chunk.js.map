{"version":3,"sources":["features/Login/Login.module.css","serviceWorker.ts","api/tasks-api.ts","api/todolists-api.ts","api/auth-api.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolist-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/store.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","TaskStatuses","TaskPriority","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","put","delete","authAPI","data","handleServerNetworkError","dispatch","message","setAppError","error","setAppStatus","status","handleServerAppError","messages","length","taskAPI","taskId","model","ResponseStatusCodes","tasksSlice","createSlice","name","initialState","reducers","removeTask","state","action","tasks","payload","index","findIndex","f","id","splice","addTask","task","todoListId","unshift","updateTask","setTasks","extraReducers","builder","addCase","addTodolist","todolist","removeTodolist","setTodolists","todolists","forEach","tl","clearTodolistData","tasksReducer","reducer","actions","updateTaskTC","domainModel","getState","currentTask","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","success","catch","console","warn","authSlice","isLoggedIn","setIsLoggedIn","value","authReducer","appSlice","isInitialized","setIsInitialized","appReducer","todolistSlice","newTodolist","filter","entityStatus","changeTodolistTitle","changeTodolistFilter","map","changeTodolistEntityStatus","todolistsReducer","fetchTodo","items","finally","AddItemForm","React","memo","callback","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","size","Button","style","minWidth","height","background","margin","onClick","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","todoId","changeStatus","changeTitle","onChangeStatusHandler","useCallback","checked","Completed","New","onChangeTitleHandler","newTitle","removeTaskHandler","tId","className","Checkbox","color","IconButton","aria-label","Delete","fontSize","Todolist","changeFilter","changeTitleTodolist","addTaskHandler","changeFilterHandler","removeTodolistHandler","changeTitleTodolistHandler","taskForTodolist","startIcon","TodolistsList","useDispatch","useSelector","auth","useEffect","deleteTaskTC","taskTitle","item","createTodolistTC","changeTitleTask","Grid","container","padding","spacing","Paper","to","rootReducer","combineReducers","app","useAppSelector","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","Alert","forwardRef","props","ref","elevation","anchorOrigin","horizontal","vertical","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","getFieldProps","handleBlur","touched","errorMessage","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","fixed","path","element","textAlign","top","CircularProgress","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cbb1c6b9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorMessage\":\"Login_errorMessage__1Yqsk\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c0caff3e-2af3-4ee5-bed5-c0d120d6cc75'\r\n    }\r\n\r\n})\r\n\r\n//api\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTaskResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n}\r\n\r\n//types\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    inProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriority {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4,\r\n}\r\ntype ResponseType<D = {}> = {\r\n    data: D\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriority\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetTaskResponse = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c0caff3e-2af3-4ee5-bed5-c0d120d6cc75'\r\n    }\r\n\r\n})\r\n// api\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    updateTodolist(todolistId: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    deleteTodolists(todolistId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    data: D\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    resultCode: number\r\n}\r\n","import axios from \"axios\";\r\nimport {ResponseType} from \"./todolists-api\"\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'c0caff3e-2af3-4ee5-bed5-c0d120d6cc75'\r\n    }\r\n\r\n})\r\n// api\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<ResponseType<{data: UserDataType}>>('auth/me')\r\n    },\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(\"/auth/login\")\r\n    }\r\n\r\n}\r\n\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type UserDataType = {\r\n    id: number\r\n    login: string\r\n    email: string\r\n}","import {setAppError, setAppStatus} from \"../app/app-reducer\";\r\nimport {ResponseType} from '../api/todolists-api';\r\nimport {AppDispatch} from \"../app/store\";\r\n\r\nexport const handleServerNetworkError = (dispatch: AppDispatch, message: string) => {\r\n    dispatch(setAppError({error: message}))\r\n    dispatch(setAppStatus({status: 'idle'}))\r\n}\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: AppDispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppError({error:  'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatus({status: 'failed'}))\r\n}\r\n","import {addTodolist, clearTodolistData, removeTodolist, setTodolists} from \"./todolist-reducer\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {taskAPI, TaskType, UpdateTaskModelType} from \"../../api/tasks-api\";\r\nimport {AppDispatch, AppRootStateType} from \"../../app/store\";\r\nimport {setAppError, setAppStatus} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {TaskPriority, TaskStatuses} from \"../../api/tasks-api\";\r\n\r\nexport enum ResponseStatusCodes {\r\n    success = 0,\r\n    error = 1,\r\n    //captcha = 10,\r\n}\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState,\r\n    reducers: {\r\n        removeTask(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(f => f.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        },\r\n        addTask(state, action: PayloadAction<{ task: TaskType }>) {\r\n            const tasks = state[action.payload.task.todoListId]\r\n            tasks.unshift(action.payload.task)\r\n        },\r\n        updateTask(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(f => f.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n        },\r\n\r\n        setTasks(state, action: PayloadAction<{ tasks: TaskType[], todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolist, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolist, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n        builder.addCase(setTodolists, (state, action) => {\r\n            action.payload.todolists.forEach(tl => state[tl.id] = [])\r\n        });\r\n        builder.addCase(clearTodolistData, () => {\r\n            return {}\r\n        });\r\n\r\n    }\r\n})\r\n\r\nexport const tasksReducer = tasksSlice.reducer\r\n\r\n// actions\r\nexport const {removeTask, addTask, updateTask, setTasks} = tasksSlice.actions\r\n\r\n// thunk\r\nexport const fetchTasks = (todolistId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setTasks({tasks: res.data.items, todolistId}))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            dispatch(setAppError({error: error.message}))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setAppStatus({status: 'idle'}))\r\n        })\r\n}\r\n\r\nexport const addTaskTC = (todolistId: string, title: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    taskAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                dispatch(addTask({task: res.data.data.item}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\n\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    taskAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                dispatch(removeTask({taskId, todolistId}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\r\n    (dispatch: AppDispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        const appState = getState()\r\n        const tasksApp = appState.tasks\r\n        const tasksForCurrentTodolist = tasksApp[todolistId]\r\n        const currentTask = tasksForCurrentTodolist.find(t => t.id === taskId)\r\n\r\n        if (!currentTask) {\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: currentTask.deadline,\r\n            description: currentTask.description,\r\n            priority: currentTask.priority,\r\n            startDate: currentTask.startDate,\r\n            title: currentTask.title,\r\n            status: currentTask.status,\r\n            ...domainModel\r\n        }\r\n\r\n        taskAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                    dispatch(setAppStatus({status: 'succeed'}))\r\n                    dispatch(updateTask({taskId, model: domainModel, todolistId}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                }\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriority\r\n    startDate?: string\r\n    deadline?: string\r\n}","import {setAppStatus} from \"../../app/app-reducer\";\r\nimport {authAPI, LoginParamsType} from \"../../api/auth-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {ResponseStatusCodes} from \"../TodolistsList/tasks-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {clearTodolistData} from \"../TodolistsList/todolist-reducer\";\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: \"auth\",\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isLoggedIn = action.payload.value\r\n        },\r\n    },\r\n})\r\n\r\nexport const authReducer = authSlice.reducer\r\n\r\n// actions\r\nexport const {setIsLoggedIn} = authSlice.actions\r\n\r\n// thunk\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus( {status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                dispatch(setIsLoggedIn({value: true}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                dispatch(setIsLoggedIn({value: false}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(clearTodolistData())\r\n        })\r\n}","import {authAPI} from \"../api/auth-api\";\r\nimport {setIsLoggedIn} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"./store\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n    isInitialized: false\r\n}\r\n\r\nconst appSlice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatus(state, action: PayloadAction<{status: RequestStatusType}>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppError(state, action: PayloadAction<{error: string | null}>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setIsInitialized(state, action: PayloadAction<{value: boolean}>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = appSlice.reducer\r\n\r\nexport const {setAppStatus, setAppError, setIsInitialized} = appSlice.actions\r\n\r\n//thunk\r\nexport const initializeAppTC = () => (dispatch: AppDispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}));\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsInitialized({value: true}))\r\n        })\r\n}\r\n\r\n","import {todolistAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType, setAppStatus} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {fetchTasks, ResponseStatusCodes} from \"./tasks-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch} from \"../../app/store\";\r\n\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nconst todolistSlice = createSlice({\r\n    name: \"todolist\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolist(state, action: PayloadAction<{ todolistId: string }>) {\r\n            const index = state.findIndex(f => f.id === action.payload.todolistId)\r\n            state.splice(index, 1)\r\n        },\r\n        addTodolist(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            const newTodolist: TodolistDomainType = {\r\n                ...action.payload.todolist,\r\n                filter: \"All\",\r\n                entityStatus: \"idle\",\r\n            }\r\n            state.unshift(newTodolist)\r\n        },\r\n        changeTodolistTitle(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilter(state, action: PayloadAction<{ id: string, filter: FilterType }>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        setTodolists(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: \"All\", entityStatus: \"idle\"}))\r\n        },\r\n        changeTodolistEntityStatus(state, action: PayloadAction<{ entityStatus: RequestStatusType, id: string }>) {\r\n            const index = state.findIndex(f => f.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        clearTodolistData() {\r\n            return []\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = todolistSlice.reducer\r\n\r\n// actions\r\nexport const {\r\n    setTodolists, addTodolist, changeTodolistEntityStatus,\r\n    changeTodolistFilter, changeTodolistTitle, clearTodolistData, removeTodolist\r\n} = todolistSlice.actions\r\n\r\n// thunk\r\nexport const fetchTodo = () => {\r\n    return (dispatch: AppDispatch) => {\r\n        dispatch(setAppStatus({status: 'loading'}))\r\n        todolistAPI.getTodolists()\r\n            .then(res => {\r\n                dispatch(setTodolists({todolists: res.data}))\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                return res.data\r\n            })\r\n            .then((todolists) => {\r\n                todolists.forEach(tl => {\r\n                    dispatch(fetchTasks(tl.id))\r\n                })\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                handleServerNetworkError(dispatch, error.message)\r\n            })\r\n    }\r\n}\r\n\r\nexport const createTodolistTC = (title: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(addTodolist({todolist: res.data.data.item}))\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatus({id: todolistId, entityStatus: \"loading\"}))\r\n    todolistAPI.deleteTodolists(todolistId)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(removeTodolist({todolistId: todolistId}))\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\nexport const updateTitleTodolistTC = (todolistId: string, title: string) => (dispatch: AppDispatch) => {\r\n    dispatch(setAppStatus({status: 'loading'}))\r\n    todolistAPI.updateTodolist(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === ResponseStatusCodes.success) {\r\n                dispatch(setAppStatus({status: 'succeed'}))\r\n                dispatch(changeTodolistTitle({id: todolistId, title}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error: AxiosError) => {\r\n            handleServerNetworkError(dispatch, error.message)\r\n        })\r\n}\r\n\r\n// types\r\nexport type FilterType = 'All' | 'Active' | 'Completed'\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterType,\r\n    entityStatus: RequestStatusType\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\n\r\n\r\ntype AddItemFormType = {\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: React.FC<AddItemFormType> = React.memo(({callback, disabled}) => {\r\n    console.log('AddItemForm working')\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string>('')\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            callback(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if(error !== '') {\r\n            setError('')\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler()\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   size='small'\r\n                   disabled={disabled}\r\n        />\r\n\r\n        <Button variant=\"contained\"\r\n                style={{minWidth: '20px', height:'40px', background: 'skyblue', margin: '0 0 5px 5px'}}\r\n                onClick={addItemHandler}\r\n                disabled={disabled}>+</Button>\r\n    </div>\r\n})","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanType = {\r\n    value: string\r\n    callback: (newTitle: string) => void\r\n}\r\n\r\nexport const EditableSpan: React.FC<EditableSpanType> = React.memo(({value, callback}) => {\r\n    console.log('EditableSpan working')\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(value)\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        callback(title)\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField variant=\"outlined\"\r\n                     value={title} onChange={onChangeHandler} autoFocus onBlur={offEditMode}\r\n                     size='small'/>\r\n\r\n        : <span onDoubleClick={onEditMode}>{value}</span>\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TaskType} from \"../../../../api/tasks-api\";\r\n\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todoId: string\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    changeTitle: (todoId: string, newTitle: string, task: TaskType) => void\r\n    removeTask: (id: string, todoId: string) => void\r\n}\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({\r\n                                                             task,\r\n                                                             todoId,\r\n                                                             changeStatus,\r\n                                                             changeTitle,\r\n                                                             removeTask,\r\n                                                         }) => {\r\n    const onChangeStatusHandler = useCallback(( e: ChangeEvent<HTMLInputElement>) => {\r\n        changeStatus(task.id, e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New, todoId)\r\n    }, [changeStatus, task.id, todoId])\r\n\r\n    const onChangeTitleHandler = useCallback((newTitle: string, task: TaskType) => {\r\n        changeTitle(todoId, newTitle, task)\r\n    }, [changeTitle, task, todoId])\r\n\r\n    const removeTaskHandler = useCallback((tId: string) => {\r\n        removeTask(tId, todoId)\r\n    }, [removeTask, todoId])\r\n\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? 'isDone' : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeStatusHandler}\r\n        />\r\n        {/*<EditableSpan value={task.title} callback={(newTitle) => onChangeTitleHandler(newTitle, task.id)}/>*/}\r\n        <EditableSpan value={task.title} callback={(newTitle) => onChangeTitleHandler(newTitle, task)}/>\r\n        <IconButton aria-label=\"delete\" size=\"small\" onClick={() => removeTaskHandler(task.id)}>\r\n            <Delete fontSize=\"small\"/>\r\n        </IconButton>\r\n\r\n    </div>\r\n})","import {Delete} from \"@material-ui/icons\";\r\nimport React, {useCallback} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TaskType} from \"../../../api/tasks-api\";\r\nimport {FilterType} from \"../todolist-reducer\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\n\r\ntype TodolistPropsType = {\r\n    todoId: string\r\n    tasks: TaskType[]\r\n    title: string\r\n    filter: FilterType\r\n    entityStatus: RequestStatusType\r\n    removeTask: (id: string, todoId: string) => void\r\n    changeFilter: (todoId: string, value: FilterType) => void\r\n    addTask: (taskTitle: string, todoId: string) => void\r\n    changeStatus: (id: string, status: TaskStatuses, todoId: string) => void\r\n    removeTodolist: (todoId: string) => void\r\n    changeTitle: (todoId: string, newTitle: string, task: TaskType) => void\r\n    changeTitleTodolist: (todoId: string, newTitle: string) => void\r\n}\r\n\r\nexport const Todolist: React.FC<TodolistPropsType> = React.memo(({\r\n                                                                     tasks,\r\n                                                                     todoId,\r\n                                                                     title,\r\n                                                                     filter,\r\n                                                                     entityStatus,\r\n                                                                     removeTask,\r\n                                                                     changeFilter,\r\n                                                                     addTask,\r\n                                                                     changeStatus,\r\n                                                                     removeTodolist,\r\n                                                                     changeTitle,\r\n                                                                     changeTitleTodolist,\r\n                                                                 }) => {\r\n\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todoId)\r\n    }, [addTask, todoId])\r\n\r\n\r\n    const changeFilterHandler = useCallback((value: FilterType) => {\r\n        changeFilter(todoId, value)\r\n    }, [changeFilter, todoId])\r\n\r\n\r\n    const removeTodolistHandler = useCallback(() => {\r\n        removeTodolist(todoId)\r\n    }, [removeTodolist, todoId])\r\n\r\n    const changeTitleTodolistHandler = useCallback((newTitle: string) => {\r\n        changeTitleTodolist(todoId, newTitle)\r\n    }, [changeTitleTodolist, todoId])\r\n\r\n\r\n    let taskForTodolist = tasks\r\n    if (filter === 'Active') taskForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    if (filter === 'Completed') taskForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={title} callback={changeTitleTodolistHandler}/>\r\n            <Button variant=\"contained\" startIcon={<Delete/>} onClick={removeTodolistHandler}\r\n                    disabled={entityStatus === 'loading'}\r\n                    style={{minWidth: '20px', height: '25px', background: 'skyblue', margin: '10px'}}>\r\n                DELETE\r\n            </Button>\r\n\r\n        </h3>\r\n\r\n        <AddItemForm callback={addTaskHandler} disabled={entityStatus === 'loading'}/>\r\n\r\n        <div>\r\n            {taskForTodolist.map(t => <Task key={t.id}\r\n                                            task={t}\r\n                                            todoId={todoId}\r\n                                            changeStatus={changeStatus}\r\n                                            changeTitle={changeTitle}\r\n                                            removeTask={removeTask}/>\r\n            )}\r\n        </div>\r\n        <div>\r\n            <Button variant={filter === 'All' ? 'outlined' : 'text'}\r\n                    style={{minWidth: '20px', height: '30px', margin: '5px'}}\r\n                    onClick={() => changeFilterHandler('All')}\r\n                    color={'success'}>All\r\n            </Button>\r\n            <Button variant={filter === 'Active' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('Active')}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={filter === 'Completed' ? 'outlined' : 'text'}\r\n                    onClick={() => changeFilterHandler('Completed')}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    changeTodolistFilter,\r\n    createTodolistTC,\r\n    deleteTodolistTC,\r\n    fetchTodo,\r\n    FilterType,\r\n    TodolistDomainType,\r\n    updateTitleTodolistTC\r\n} from \"./todolist-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {addTaskTC, deleteTaskTC, updateTaskTC} from \"./tasks-reducer\";\r\nimport {TaskStatuses, TaskType} from \"../../api/tasks-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {AddItemForm} from \"../../components/AddItemForm\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {TasksStateType} from \"../../app/App\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        if(!isLoggedIn) return\r\n        dispatch(fetchTodo())\r\n    }, [])\r\n\r\n    const removeTask = useCallback((taskId: string, todoId: string) => {\r\n        dispatch(deleteTaskTC(todoId, taskId))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((taskTitle: string, todoId: string) => {\r\n        dispatch(addTaskTC(todoId, taskTitle))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, status: TaskStatuses, todoId: string) => {\r\n        dispatch(updateTaskTC(todoId, taskId, {status}))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((todoId: string, value: FilterType) => {\r\n        dispatch(changeTodolistFilter({id: todoId, filter: value}))\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback((todoId: string) => {\r\n        dispatch(deleteTodolistTC(todoId))\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(createTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const changeTitleTask = useCallback((todoId: string, newTitle: string, task: TaskType) => {\r\n        dispatch(updateTaskTC(todoId, task.id, {title: newTitle}))\r\n    }, [dispatch])\r\n\r\n    const changeTitleTodolist = useCallback((todoId: string, newTitle: string) => {\r\n        dispatch(updateTitleTodolistTC(todoId, newTitle))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn) {\r\n        return <Navigate to=\"login\"/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: \"20px\"}}>\r\n            <AddItemForm callback={addTodolist}/>\r\n        </Grid>\r\n\r\n        <Grid container spacing={3}>\r\n            {todolists.map(tl => {\r\n                let taskForTodolist = tasks[tl.id]\r\n\r\n                return <Grid item key={tl.id}>\r\n                    <Paper style={{padding: \"10px\"}}>\r\n                        <Todolist todoId={tl.id}\r\n                                  title={tl.title}\r\n                                  tasks={taskForTodolist}\r\n                                  removeTask={removeTask}\r\n                                  filter={tl.filter}\r\n                                  entityStatus={tl.entityStatus}\r\n                                  changeFilter={changeFilter}\r\n                                  addTask={addTask}\r\n                                  changeStatus={changeStatus}\r\n                                  removeTodolist={removeTodolist}\r\n                                  changeTitle={changeTitleTask}\r\n                                  changeTitleTodolist={changeTitleTodolist}\r\n                        /></Paper>\r\n                </Grid>\r\n            })}\r\n        </Grid>\r\n    </>\r\n}","import {tasksReducer} from \"../features/TodolistsList/tasks-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolist-reducer\";\r\nimport {combineReducers} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {authReducer} from \"../features/Login/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {SnackbarOrigin} from \"@mui/material/Snackbar/Snackbar\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppError} from \"../../app/app-reducer\";\r\n\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nconst anchorOrigin: SnackbarOrigin = {\r\n    horizontal: 'center',\r\n    vertical: 'top'\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useAppSelector<string | null>(state => state.app.error)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError({error: null}))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}\r\n                  anchorOrigin={anchorOrigin}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                Error: {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport style from \"./Login.module.css\"\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {LoginParamsType} from \"../../api/auth-api\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Navigate } from 'react-router-dom';\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n        validate: (values) => {\r\n            const errors: Partial<Omit<LoginParamsType, \"captcha\">> = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be more than 3 characters';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to=\"/\"/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"email\")}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email\r\n                        && <div className={style.errorMessage}>{formik.errors.email}</div>}\r\n\r\n                        <TextField type=\"password\"\r\n                                   label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps(\"password\")}\r\n                                   onBlur={formik.handleBlur}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password\r\n                        && <div className={style.errorMessage}>{formik.errors.password}</div>}\r\n\r\n                        <FormControlLabel label={'Remember me'}\r\n                                          control={<Checkbox/>}\r\n                                          {...formik.getFieldProps(\"rememberMe\")}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TaskType} from \"../api/tasks-api\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport {useAppSelector} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {Navigate, Route, Routes} from \"react-router-dom\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nfunction App() {\r\n\r\n    //const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch()\r\n    const status = useAppSelector<RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn)\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const handlerLogout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {  isLoggedIn && <Button color=\"inherit\" onClick={handlerLogout}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress color=\"primary\"/>}\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        < BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}